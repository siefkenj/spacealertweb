// Generated by CoffeeScript 1.4.0
/*
Space Alert Web
Copyright (c) 2013 Jason Siefken <siefkenj @ gmail.com> - Licensed GPLv3
*/

var MissionLog, init;

init = function() {
  var finishedDownloadingCallback, hasFinishedDownloading, logger;
  logger = new MissionLog(document.querySelector('#log'));
  window.soundFont = new SpaceAlert.Audio.AudioElmSoundFont();
  window.eventList = SpaceAlert.CommandSequence.makeCommandSequence(SpaceAlert.CommandSequence.NEW_FRONTIER_MISSION_1);
  window.sched = new SpaceAlert.Scheduler({
    eventList: eventList,
    soundFont: soundFont,
    logger: logger,
    speed: 1
  });
  console.log(sched);
  window.sched = sched;
  hasFinishedDownloading = false;
  finishedDownloadingCallback = null;
  soundFont.downloadClips(function() {
    hasFinishedDownloading = true;
    return typeof finishedDownloadingCallback === "function" ? finishedDownloadingCallback() : void 0;
  });
  document.querySelector('#play-button').onclick = function() {
    if (hasFinishedDownloading) {
      return sched.play();
    } else {
      return finishedDownloadingCallback = function() {
        return sched.play();
      };
    }
  };
  document.querySelector('#pause-button').onclick = function() {
    return sched.pause();
  };
  return document.querySelector('#showclips-button').onclick = function() {
    var clip, _, _ref, _results;
    _ref = soundFont.clips;
    _results = [];
    for (_ in _ref) {
      clip = _ref[_];
      if (!(clip)) {
        continue;
      }
      clip.controls = true;
      clip.setAttribute('style', '');
      _results.push(document.body.appendChild(clip));
    }
    return _results;
  };
};

window.addEventListener('load', init, false);

MissionLog = (function() {
  var formatTime;

  formatTime = function(secs) {
    var min;
    min = Math.floor(secs / 60);
    secs = secs % 60;
    return "" + min + ":" + (("00" + secs).slice(-2));
  };

  function MissionLog(elm) {
    this.elm = elm;
    '';

  }

  MissionLog.prototype.log = function(cmd) {
    var text;
    switch (cmd.type) {
      case 'Threat':
        text = "";
        if (cmd.serous) {
          text += "Serious ";
        }
        switch (cmd.zone) {
          case 'Internal':
            text += "<span class='internal'>Internal Threat</span> ";
            break;
          case 'White':
            text += "Threat <span class='white'>Zone White</span> ";
            break;
          case 'Blue':
            text += "Threat <span class='blue'>Zone Blue</span> ";
            break;
          case 'Red':
            text += "Threat <span class='red'>Zone Red</span> ";
        }
        text += "(<span class='time'>Time " + cmd.round + "</span>)";
        return this.elm.innerHTML += "<li><span class=\"timestamp\">" + (formatTime(cmd.time)) + "</span><span class=\"description threat\">" + text + "</span></li>";
      case 'Incoming Data':
        text = "Incoming Data";
        return this.elm.innerHTML += "<li><span class=\"timestamp\">" + (formatTime(cmd.time)) + "</span><span class=\"description incoming-data\">" + text + "</span></li>";
      case 'Data Transfer':
        text = "Data Transfer";
        return this.elm.innerHTML += "<li><span class=\"timestamp\">" + (formatTime(cmd.time)) + "</span><span class=\"description data-transfer\">" + text + "</span></li>";
    }
  };

  return MissionLog;

})();
